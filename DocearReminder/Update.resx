<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>