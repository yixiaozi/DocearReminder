<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>