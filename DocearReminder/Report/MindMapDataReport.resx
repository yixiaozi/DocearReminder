<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        AAAAAElFTkSuQmCC
</value>
  </data>
</root>