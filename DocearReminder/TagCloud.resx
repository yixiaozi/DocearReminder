<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        WwAAAABJRU5ErkJggg==
</value>
  </data>
</root>